{{ $name := .Name }}/// `{{ $name }}` represents {{ .Description | downcaseFirst | multilineComment }}.
pub enum {{ $name }} {
{{range .Enum}}  {{ . | uppercaseFirst }}
{{ end -}}
} derive(Eq)

/// `{{ $name }}.to_string` implements the Show trait.
pub fn to_string(self : {{ $name }}) -> String {
  match self {
  {{range .Enum}}  {{ . | uppercaseFirst }} => "{{ . }}"
  {{ end -}}
  }
}

/// `{{ $name }}::from_json` transforms a `Json` to a value.
pub fn {{ $name }}::from_json(value : Json) -> {{ $name }}? {
  match value.as_string() {
    {{range .Enum}}Some("{{ . }}") => Some({{ . | uppercaseFirst }})
    {{ end -}}
    _ => None
  }
}

/// `{{ $name }}::parse` parses a JSON string and returns the value.
pub fn {{ $name }}::parse(s : String) -> {{ $name }}!String {
  match s {
{{range .Enum}}    "\"{{ . }}\"" => {{ . | uppercaseFirst }}
{{ end -}}
{{ "    _ => {" }}
      raise "not a {{ $name }}: \{s}"
    }
  }
}

pub impl @jsonutil.ToJson for {{ $name }} with to_json(self) {
  match self {
  {{range .Enum}}  {{ . | uppercaseFirst }} => @jsonutil.to_json("{{ . }}")
  {{ end -}}
  }
}
