{{ $name := .Name }}/// `{{ $name }}` represents {{ .Description | downcaseFirst | multilineComment }}.
pub enum {{ $name }} {
{{range .Enum}}  {{ . | uppercaseFirst }}
{{ end -}}
} derive(Eq)

// Why is `{{ $name }}.to_string` necessary when the `Show` trait is implemented below?
pub fn to_string(self : {{ $name }}) -> String {
  let buf = Buffer::new()
  Show::output(self, buf)
  buf.to_string()
}

/// `{{ $name }}.output` implements the Show trait.
pub impl Show for {{ $name }} with output(self, logger) {
  match self {
  {{range .Enum}}  {{ . | uppercaseFirst }} => logger.write_string("{{ . }}")
  {{ end -}}
  }
}

pub fn to_json(self : {{ $name }}) -> Json {
  match self {
  {{range .Enum}}  {{ . | uppercaseFirst }} => "{{ . }}".to_json()
  {{ end -}}
  }
}

/// `{{ $name }}::from_json` transforms a `Json` to a value.
pub impl @json.FromJson for {{ $name }} with from_json(json, path) {
  match json {
    {{range .Enum}}String("{{ . }}") => {{ . | uppercaseFirst }}
    {{ end -}}
    s =>
      raise @json.JsonDecodeError(
        (path, "{{ $name }}::from_json: expected a {{ $name }}, got \{s}"),
      )
  }
}
