{{ $name := .Name }}{{ $top := . }}test "{{ $name }}.to_json and .from_json work as expected on default object" {
  let default_object = {{ $name }}::new()
  let got = default_object.to_json().stringify(escape_slash=false)
  let want =
{{ "    #|{" }}{{range $index, $prop := .Properties}}{{ if .IsRequired }}"{{ .Name }}":{{ defaultMbtJSONValue . $top }}{{ showJSONCommaForRequired $index $top }}{{ end }}{{ end -}}{{ "}" }}
  assert_eq!(got, want)
  //
  let got_parse : {{ $name }} = @json.from_json!(@json.parse!(want))
  assert_eq!(got_parse, default_object)
}

test "{{ $name }}.to_json and .from_json work as expected on object only containing required fields" {
  let required_fields : {{ $name }} = {
{{range .Properties}}    {{ .Name | lowerSnakeCase }}: {{ requiredMbtValue . }},
{{ end -}}
{{ "  }" }}
  let got = required_fields.to_json() |> @json.stringify(escape_slash=false)
  let want =
{{ "    #|{" }}{{range $index, $prop := .Properties}}{{ if .IsRequired }}"{{ .Name }}":{{ requiredMbtJSONValue . $top }}{{ showJSONCommaForRequired $index $top }}{{ end }}{{ end -}}{{ "}" }}
  assert_eq!(got, want)
  //
  let got_parse : {{ $name }} = @json.from_json!(@json.parse!(want))
  assert_eq!(got_parse, required_fields)
}

test "{{ $name }}.to_json and .from_json work as expected on object with optional fields" {
  let optional_fields : {{ $name }} = {
    ..{{ $name }}::new(),
    an_optional_date: Some("anOptionalDate"),
  }
  let got = optional_fields.to_json() |> @json.stringify(escape_slash=false)
  let want =
{{ "    #|{" }}{{ $propLen := .Properties | len }}{{range $index, $prop := .Properties}}"{{ .Name }}":{{ optionalMbtJSONValue . $top }}{{ showJSONCommaForOptional $index $propLen }}{{ end -}}{{ "}" }}
  assert_eq!(got, want)
  //
  let got_parse : {{ $name }} = @json.from_json!(@json.parse!(want))
  assert_eq!(got_parse, optional_fields)
}
