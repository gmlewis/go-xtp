{{ $name := .Name }}{{ $top := . }}/// `{{ $name }}` represents {{ .Description | downcaseFirst }}.
pub struct {{ $name }} {
{{range .Properties}}  {{ .Description | optionalMbtMultilineComment }}{{ .Name | lowerSnakeCase }} : {{ getMbtType . }}
{{ end -}}
} derive(Show, Eq)

/// `{{ $name }}::new` returns a new struct with default values.
pub fn {{ $name }}::new() -> {{ $name }} {
  {
{{range .Properties}}    {{ .Name | lowerSnakeCase }}: {{ defaultMbtValue . }},
{{ end -}}
{{ "  }" }}
}

pub fn to_json(self : {{ $name }}) -> Json {
  let json : Map[String, Json] = {  }
{{range .Properties}}{{ if .IsRequired }}  json["{{ .Name }}"] = self.{{ .Name | lowerSnakeCase }}.to_json()
{{ end }}{{ end -}}
{{range .Properties}}{{ if .IsRequired | not }}  match self.{{ .Name | lowerSnakeCase }} {
    Some({{ .Name | lowerSnakeCase }}) =>
      json["{{ .Name }}"] = {{ .Name | lowerSnakeCase }}.to_json()
    _ => ()
  }
{{ end }}{{ end -}}
{{ "  json.to_json()" }}
}

/// `{{ $name }}::from_json` transforms a `Json` to a value.
pub impl @json.FromJson for {{ $name }} with from_json(json, path) {
  let json = match json.as_object() {
    Some(json) => json
    e =>
      raise @json.JsonDecodeError(
        (path, "{{ $name }}::from_json: expected object, got \{e}"),
      )
  }
{{range .Properties}}  let {{ .Name | lowerSnakeCase }} : {{ getMbtType . }} = match json.get("{{ .Name }}") {
{{ if mbtTypeIs . "Bool" }}    Some(True) => true
    Some(False) => false
{{- else if mbtTypeIs . "String"}}    Some(String({{ .Name | lowerSnakeCase }})) => {{ .Name | lowerSnakeCase }}
{{- else if mbtTypeIs . "String?"}}    Some(String({{ .Name | lowerSnakeCase }})) => Some({{ .Name | lowerSnakeCase }})
    Some(Null) | None => None
{{- else if mbtTypeIs . "Int"}}    Some(Number({{ .Name | lowerSnakeCase }})) => {{ .Name | lowerSnakeCase }}.to_int()
{{- else if mbtTypeIs . "Int?"}}    Some(Number({{ .Name | lowerSnakeCase }})) => Some({{ .Name | lowerSnakeCase }}.to_int())
    Some(Null) | None => None
{{- else if mbtTypeIs . "Int64"}}    Some(Number({{ .Name | lowerSnakeCase }})) => {{ .Name | lowerSnakeCase }}.to_int64()
{{- else if mbtTypeIs . "Int64?"}}    Some(Number({{ .Name | lowerSnakeCase }})) => Some({{ .Name | lowerSnakeCase }}.to_int64())
    Some(Null) | None => None
{{- else }}    Some({{ .Name | lowerSnakeCase }}) => @json.from_json!({{ .Name | lowerSnakeCase }})
{{- end }}
    _ =>
      raise @json.JsonDecodeError(
        (path, "{{ $name }}::from_json:{{ .Name | lowerSnakeCase }}: expected {{ getMbtType . }}{{ if mbtTypeIsOptional . }} or Null{{ end }}"),
      )
  }
{{ end -}}
{{ "  {" }}
{{range .Properties}}    {{ .Name | lowerSnakeCase }},
{{ end -}}
{{ "  }" }}
}

/// `{{ $name }}::get_schema` returns an `XTPSchema` for the `{{ $name }}`.
pub fn {{ $name }}::get_schema() -> XTPSchema {
  {
{{range .Properties}}    "{{ .Name }}": "{{ getExtismType . $top }}",
{{ end -}}
{{ "  }" }}
}
